# AUTOGENERATED! DO NOT EDIT! File to edit: 00_core.ipynb (unless otherwise specified).

__all__ = ['Card', 'CARD_VALUES', 'CARD_COLORS', 'generate_random_card', 'test_if_card_has_higher_value',
           'test_if_card_has_same_value', 'test_if_color_matches', 'test_if_lower_trump_wins',
           'test_if_lower_trump_loses', 'gen_card_deck', 'Player', 'iterate_cards', 'deal_starting_hand',
           'draw_trump_card', 'determine_starting_player', 'make_trumps', 'draw_cards']

# Cell
import functools
from itertools import permutations
import random

# Cell
@functools.total_ordering
class Card():
    def __init__(self, value, color):
        self.value = value
        self.color = color
        self.is_trump = False

        self._face_matching = {11:'Jack',
                          12:'Queen',
                          13:'King',
                          14: 'Ace'}

    def make_trump(self):
        "Makes a card to a trump card at the beginning of a round."
        self.is_trump = True

    def _matches_color(self,other):
        if not isinstance(other, Card):
            raise NotImplementedError
        return self.color == other.color

    def __eq__(self, other):
        if not isinstance(other, Card):
            raise NotImplementedError
        return self.value == other.value

    def __gt__(self, other):
        if not isinstance(other, Card):
            raise NotImplementedError
        elif (self.is_trump == True) & (other.is_trump == False):
            return True
        else:
            return self.value >= other.value

    def __repr__(self):
        val = self.value if self.value not in self._face_matching.keys() else self._face_matching.get(self.value)
        return f'Card({val}, {self.color}, trump={self.is_trump})'


# Cell
CARD_VALUES = [i for i in range(6,15)]
CARD_COLORS = ['heart', 'spade', 'club', 'diamond']

# Cell
def generate_random_card():
    return Card(random.sample(CARD_VALUES,1)[0], random.sample(CARD_COLORS,1)[0])
generate_random_card()

# Cell
def test_if_card_has_higher_value():
    heart_king = Card(13, 'heart')
    heart_six = Card(6, 'heart')
    assert heart_king > heart_six

def test_if_card_has_same_value():
    heart_seven = Card(7, 'heart')
    spade_seven = Card(7, 'spade')
    assert heart_seven == spade_seven

def test_if_color_matches():
    heart_seven = Card(7, 'heart')
    heart_six = Card(6, 'heart')
    assert heart_seven._matches_color(heart_six)

def test_if_lower_trump_wins():
    heart_six = Card(6,'heart')
    heart_seven = Card(7, 'heart')
    heart_six.make_trump()
    assert heart_six > heart_seven

def test_if_lower_trump_loses():
    heart_six = Card(6,'heart')
    heart_seven = Card(7, 'heart')
    heart_six.make_trump()
    heart_seven.make_trump()
    assert (heart_six > heart_seven) == False

test_if_card_has_higher_value()
test_if_card_has_same_value()
test_if_color_matches()
test_if_lower_trump_wins()
test_if_lower_trump_loses()

# Cell
def gen_card_deck():
    card_deck = []
    for val in CARD_VALUES:
        for c in CARD_COLORS:
            card_deck.append(Card(val,c))
    return card_deck
assert len(gen_card_deck()) == 36

# Cell
class Player:
    def __init__(self, name):
        self.name = name
        self._is_turn = False
        self._under_attack = False
        self._can_attack = False
        self.hand = []


    def start_turn(self):
        self._is_turn = True

    def end_turn(self):
        self._is_turn = False

    def draw_card(self, card):
        self.hand.append(card)

    def determine_possible_moves(self, table_cards):
        pass

    def play_cards(self):
        pass

    def pick_up_cards(self, table_cards):
        pass

    def cover_cards(self, table_cards):
        pass

    def attack_neighour(self):
        pass


    def __repr__(self):
        return f'Payer(name={self.name})'

# Cell
def iterate_cards(players):
    for p in players:
        for c in p.hand:
            yield c

# Cell
def deal_starting_hand(players, cards):
    random.shuffle(cards)
    for _ in range(6):
        for p in players:
            p.draw_card(cards.pop())

# Cell
def draw_trump_card(cards):
    trump = cards.pop()
    cards.insert(0,trump)
    return trump.color

# Cell
def determine_starting_player(players):
    beginner = sorted(players, key=lambda x: [y for y in x.hand if y.is_trump])[0]
    beginner.start_turn() #TODO: Fix for situation when player has no trump card!

# Cell
def make_trumps(players, trump):
    for card in iterate_cards(players):
        if card.color == trump:
            card.make_trump()

# Cell
def draw_cards(players,cards):
    while min([len(p.hand) for p in players]) < 6:
        for p in players:
            p.draw_card(cards.pop()) #TODO: Make sure drawing is in the right order!
            if not cards:
                break